#!/usr/bin/env python3

import os

import click

from mela.git_repo_client import GitRepoClient, CONFIG_FILE
from mela.recipe import Recipe
from mela.config import Config

DEFAULT_RECIPES_DIR = f"{os.environ['HOME']}/mela"


@click.group()
@click.option(
    '--recipes',
    type=click.Path(exists=True, writable=True),
    default=DEFAULT_RECIPES_DIR,
    help='Directory where recipes located'
)
@click.pass_context
def recipes(ctx, **kwargs):
    ctx.ensure_object(dict)
    ctx.obj['recipes_dir'] = kwargs['recipes']
    ctx.obj['config'] = Config(f"{ctx.obj['recipes_dir']}/config.yaml")


@recipes.command(name='format')
@click.pass_context
def format_command(ctx):
    git_repo_client = GitRepoClient(ctx.obj['recipes_dir'])
    if git_repo_client.is_valid_git_repo:
        git_repo_client.stage_recipe_files()  # Un-formatted recipes will be staged in git
    recipe_files_to_format = [
        file_name for file_name in os.listdir(ctx.obj['recipes_dir'])
        if os.path.isfile(f"{ctx.obj['recipes_dir']}/{file_name}") and file_name != CONFIG_FILE
    ]
    for file_name in recipe_files_to_format:
        mela_recipe = Recipe(f"{ctx.obj['recipes_dir']}/{file_name}", ctx.obj['config'])
        mela_recipe.format_recipe()


if __name__ == '__main__':
    recipes()
